"use client";\n\nimport { useState, useEffect } from \"react\";\nimport { useSession } from \"next-auth/react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { toast } from \"sonner\";\nimport { Search, Trophy, Plus, Users, Calendar, AlertCircle, CheckCircle, Play, PencilLine, Settings, Sliders } from \"lucide-react\";\nimport Link from \"next/link\";\n\ninterface League {\n  id: string;\n  _id: string;\n  name: string;\n  description: string;\n  startDate: string;\n  endDate: string;\n  status: string;\n  teams: any[];\n  scheduleGenerated: boolean;\n  organizer: {\n    id: string;\n    name: string;\n    email: string;\n  };\n}\n\nfunction LeagueManagement() {\n  const { data: session } = useSession();\n  const [leagues, setLeagues] = useState<League[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n\n  const fetchLeagues = async () => {\n    try {\n      setIsLoading(true);\n      let url = '/api/leagues';\n      \n      // Add search params if provided\n      const params = new URLSearchParams();\n      \n      if (searchTerm) {\n        params.append('name', searchTerm);\n      }\n      \n      if (statusFilter && statusFilter !== \"all\") {\n        params.append('status', statusFilter);\n      }\n      \n      if (params.toString()) {\n        url += `?${params.toString()}`;\n      }\n      \n      const response = await fetch(url);\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to fetch leagues\");\n      }\n      \n      const data = await response.json();\n      \n      if (data.leagues) {\n        // Process the leagues to ensure IDs are normalized\n        const processedLeagues = data.leagues.map((league: any) => ({\n          ...league,\n          id: league._id || league.id\n        }));\n        setLeagues(processedLeagues);\n      }\n    } catch (error) {\n      console.error(\"Error fetching leagues:\", error);\n      toast.error(\"Failed to load leagues\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchLeagues();\n  }, [statusFilter]);\n\n  const handleSearch = () => {\n    fetchLeagues();\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'draft':\n        return <Badge variant=\"outline\">Draft</Badge>;\n      case 'registration':\n        return <Badge variant=\"secondary\">Registration</Badge>;\n      case 'active':\n        return <Badge variant=\"default\">Active</Badge>;\n      case 'completed':\n        return <Badge variant=\"success\" className=\"bg-green-500\">Completed</Badge>;\n      case 'canceled':\n        return <Badge variant=\"destructive\">Canceled</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  // Get recommended action for a league based on its status\n  const getRecommendedAction = (league: League) => {\n    // If the league has no teams, recommend adding teams first\n    if (league.teams.length === 0) {\n      return {\n        label: \"Add Teams\",\n        href: `/dashboard/leagues/${league.id}/manage?tab=teams`,\n        icon: <Users className=\"h-4 w-4 mr-1\" />,\n        isPrimary: true\n      };\n    }\n    \n    // If the league has teams but no schedule, recommend generating schedule\n    if (!league.scheduleGenerated && league.teams.length >= 2) {\n      return {\n        label: \"Generate Schedule\",\n        href: `/dashboard/leagues/${league.id}/manage?tab=schedule`,\n        icon: <Calendar className=\"h-4 w-4 mr-1\" />,\n        isPrimary: true\n      };\n    }\n    \n    // Status-specific actions\n    switch(league.status) {\n      case 'draft':\n        return {\n          label: \"Open Registration\",\n          href: `/dashboard/leagues/${league.id}/manage`,\n          icon: <Play className=\"h-4 w-4 mr-1\" />,\n          isPrimary: true\n        };\n        \n      case 'registration':\n        return {\n          label: \"Start League\",\n          href: `/dashboard/leagues/${league.id}/manage`,\n          icon: <Play className=\"h-4 w-4 mr-1\" />,\n          isPrimary: league.scheduleGenerated && league.teams.length >= 2\n        };\n        \n      case 'active':\n        return {\n          label: \"Record Results\",\n          href: `/dashboard/leagues/${league.id}/matches`,\n          icon: <PencilLine className=\"h-4 w-4 mr-1\" />,\n          isPrimary: true\n        };\n        \n      case 'completed':\n        return {\n          label: \"View Results\",\n          href: `/dashboard/leagues/${league.id}/rankings`,\n          icon: <Trophy className=\"h-4 w-4 mr-1\" />,\n          isPrimary: false\n        };\n        \n      default:\n        return {\n          label: \"Manage\",\n          href: `/dashboard/leagues/${league.id}/manage`,\n          icon: <Settings className=\"h-4 w-4 mr-1\" />,\n          isPrimary: false\n        };\n    }\n  };\n\n  // Format dates for consistency\n  const formatDate = (dateString: string) => {\n    try {\n      return new Date(dateString).toLocaleDateString();\n    } catch (e) {\n      return \"Invalid date\";\n    }\n  };\n\n  // Determine if league setup is complete\n  const isLeagueSetupComplete = (league: League) => {\n    return league.teams.length >= 2 && league.scheduleGenerated;\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex flex-col sm:flex-row sm:justify-between gap-4\">\n        <div className=\"flex-1 flex items-center space-x-2\">\n          <Input\n            placeholder=\"Search leagues by name\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"flex-1\"\n          />\n          <Button onClick={handleSearch} type=\"button\">\n            <Search className=\"h-4 w-4 mr-2\" />\n            Search\n          </Button>\n        </div>\n        \n        <div className=\"flex space-x-2\">\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-[180px]\">\n              <SelectValue placeholder=\"Filter by status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Statuses</SelectItem>\n              <SelectItem value=\"draft\">Draft</SelectItem>\n              <SelectItem value=\"registration\">Registration</SelectItem>\n              <SelectItem value=\"active\">Active</SelectItem>\n              <SelectItem value=\"completed\">Completed</SelectItem>\n              <SelectItem value=\"canceled\">Canceled</SelectItem>\n            </SelectContent>\n          </Select>\n          \n          <Button asChild>\n            <Link href=\"/dashboard/leagues/create\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              New League\n            </Link>\n          </Button>\n        </div>\n      </div>\n      \n      <Card>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>League Name</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Setup</TableHead>\n                  <TableHead>Teams</TableHead>\n                  <TableHead>Dates</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {isLoading ? (\n                  <TableRow>\n                    <TableCell colSpan={6} className=\"text-center\">\n                      <div className=\"py-8 text-muted-foreground animate-pulse\">\n                        Loading leagues...\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ) : leagues.length > 0 ? (\n                  leagues.map((league) => {\n                    const recommendedAction = getRecommendedAction(league);\n                    return (\n                      <TableRow key={league.id}>\n                        <TableCell className=\"font-medium\">\n                          <Link href={`/dashboard/leagues/${league.id}`} className=\"hover:underline\">\n                            {league.name}\n                          </Link>\n                        </TableCell>\n                        <TableCell>{getStatusBadge(league.status)}</TableCell>\n                        <TableCell>\n                          {isLeagueSetupComplete(league) ? (\n                            <div className=\"flex items-center text-green-600\">\n                              <CheckCircle className=\"h-4 w-4 mr-1\" />\n                              <span className=\"text-xs\">Complete</span>\n                            </div>\n                          ) : (\n                            <div className=\"flex items-center text-amber-600\">\n                              <AlertCircle className=\"h-4 w-4 mr-1\" />\n                              <span className=\"text-xs\">Incomplete</span>\n                            </div>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center\">\n                            <Users className=\"h-4 w-4 mr-1 text-muted-foreground\" />\n                            <span>{league.teams.length}</span>\n                          </div>\n                          <div className=\"text-xs text-muted-foreground mt-1\">\n                            {league.scheduleGenerated ? (\n                              <div className=\"flex items-center\">\n                                <Calendar className=\"h-3 w-3 mr-1\" />\n                                <span>Schedule ready</span>\n                              </div>\n                            ) : (\n                              <div className=\"flex items-center\">\n                                <Calendar className=\"h-3 w-3 mr-1\" />\n                                <span>No schedule</span>\n                              </div>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-xs\">\n                            <div className=\"flex items-center mb-1\">\n                              <span className=\"font-medium w-10\">Start:</span> \n                              {formatDate(league.startDate)}\n                            </div>\n                            <div className=\"flex items-center\">\n                              <span className=\"font-medium w-10\">End:</span> \n                              {formatDate(league.endDate)}\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex gap-2\">\n                            <Button \n                              variant={recommendedAction.isPrimary ? \"default\" : \"outline\"} \n                              size=\"sm\" \n                              asChild\n                            >\n                              <Link href={recommendedAction.href}>\n                                {recommendedAction.icon}\n                                {recommendedAction.label}\n                              </Link>\n                            </Button>\n                            \n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              className=\"px-2\" \n                              asChild\n                            >\n                              <Link href={`/dashboard/leagues/${league.id}/manage`}>\n                                <Sliders className=\"h-4 w-4\" />\n                                <span className=\"sr-only\">All Settings</span>\n                              </Link>\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={6} className=\"text-center\">\n                      <div className=\"py-8\">\n                        <Trophy className=\"h-8 w-8 mx-auto text-muted-foreground mb-2\" />\n                        <p className=\"text-muted-foreground\">No leagues found</p>\n                        {searchTerm && (\n                          <p className=\"text-sm text-muted-foreground mt-1\">\n                            Try a different search term\n                          </p>\n                        )}\n                        <Button\n                          className=\"mt-4\"\n                          asChild\n                        >\n                          <Link href=\"/dashboard/leagues/create\">\n                            <Plus className=\"h-4 w-4 mr-2\" />\n                            Create League\n                          </Link>\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n// Change from named export to default export\nexport default LeagueManagement;
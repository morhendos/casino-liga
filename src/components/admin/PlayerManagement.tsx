"use client";\n\nimport { useState, useEffect } from \"react\";\nimport { useSession } from \"next-auth/react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { toast } from \"sonner\";\nimport { Search, Plus, Mail, User, UserCircle2 } from \"lucide-react\";\n\ninterface Player {\n  id: string;\n  _id: string;\n  nickname: string;\n  email?: string;\n  userId?: string;\n  skillLevel: number;\n  handedness: string;\n  preferredPosition: string;\n  status: 'invited' | 'active' | 'inactive';\n  invitationSent: boolean;\n  createdAt: string;\n}\n\nfunction PlayerManagement() {\n  const { data: session } = useSession();\n  const [players, setPlayers] = useState<Player[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  \n  // New player form state\n  const [newPlayerData, setNewPlayerData] = useState({\n    nickname: \"\",\n    email: \"\",\n    skillLevel: \"5\",\n    handedness: \"right\",\n    preferredPosition: \"both\"\n  });\n  const [isCreating, setIsCreating] = useState(false);\n  \n  const fetchPlayers = async () => {\n    try {\n      setIsLoading(true);\n      let url = '/api/admin/players';\n      \n      // Add search params if provided\n      const params = new URLSearchParams();\n      \n      if (searchTerm) {\n        if (searchTerm.includes('@')) {\n          params.append('email', searchTerm);\n        } else {\n          params.append('nickname', searchTerm);\n        }\n      }\n      \n      if (statusFilter && statusFilter !== \"all\") {\n        params.append('status', statusFilter);\n      }\n      \n      if (params.toString()) {\n        url += `?${params.toString()}`;\n      }\n      \n      const response = await fetch(url);\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to fetch players\");\n      }\n      \n      const data = await response.json();\n      \n      if (data.players) {\n        // Process the players to ensure IDs are normalized\n        const processedPlayers = data.players.map((player: any) => ({\n          ...player,\n          id: player._id || player.id\n        }));\n        setPlayers(processedPlayers);\n      }\n    } catch (error) {\n      console.error(\"Error fetching players:\", error);\n      toast.error(\"Failed to load players\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchPlayers();\n  }, [statusFilter]);\n\n  const handleSearch = () => {\n    fetchPlayers();\n  };\n  \n  const handleCreatePlayer = async () => {\n    try {\n      setIsCreating(true);\n      \n      // Validate email if provided\n      if (newPlayerData.email && !(/^\\S+@\\S+\\.\\S+$/.test(newPlayerData.email))) {\n        toast.error(\"Please enter a valid email address\");\n        return;\n      }\n      \n      // Validate required fields\n      if (!newPlayerData.nickname) {\n        toast.error(\"Player nickname is required\");\n        return;\n      }\n      \n      const response = await fetch('/api/admin/players', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          ...newPlayerData,\n          skillLevel: parseInt(newPlayerData.skillLevel)\n        }),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to create player');\n      }\n      \n      const newPlayer = await response.json();\n      \n      // Update the players list\n      setPlayers([newPlayer, ...players]);\n      \n      // Reset the form\n      setNewPlayerData({\n        nickname: \"\",\n        email: \"\",\n        skillLevel: \"5\",\n        handedness: \"right\",\n        preferredPosition: \"both\"\n      });\n      \n      // Close dialog\n      setCreateDialogOpen(false);\n      \n      toast.success(\"Player created successfully\");\n    } catch (error) {\n      console.error('Error creating player:', error);\n      toast.error(error instanceof Error ? error.message : 'Failed to create player');\n    } finally {\n      setIsCreating(false);\n    }\n  };\n  \n  const sendInvitation = async (playerId: string) => {\n    try {\n      const response = await fetch(`/api/admin/players/${playerId}/invite`, {\n        method: 'POST',\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to send invitation');\n      }\n      \n      // Update the player in the list\n      setPlayers(players.map(player => {\n        if (player.id === playerId) {\n          return { ...player, invitationSent: true };\n        }\n        return player;\n      }));\n      \n      toast.success(\"Invitation sent successfully\");\n    } catch (error) {\n      console.error('Error sending invitation:', error);\n      toast.error(error instanceof Error ? error.message : 'Failed to send invitation');\n    }\n  };\n  \n  const getStatusBadge = (player: Player) => {\n    if (player.userId) {\n      return <Badge variant=\"outline\" className=\"bg-green-50 text-green-700\">Active User</Badge>;\n    }\n    \n    if (player.status === 'invited') {\n      return player.invitationSent ? \n        <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-700\">Invitation Sent</Badge> :\n        <Badge variant=\"outline\" className=\"bg-amber-50 text-amber-700\">Pending Invitation</Badge>;\n    }\n    \n    return <Badge variant=\"outline\" className=\"bg-gray-100 text-gray-700\">{player.status}</Badge>;\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between\">\n        <div className=\"flex-1 flex items-center space-x-2\">\n          <Input\n            placeholder=\"Search by nickname or email\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"flex-1\"\n          />\n          <Button onClick={handleSearch} type=\"button\">\n            <Search className=\"h-4 w-4 mr-2\" />\n            Search\n          </Button>\n        </div>\n        \n        <div className=\"flex space-x-2\">\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-[180px]\">\n              <SelectValue placeholder=\"Filter by status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Players</SelectItem>\n              <SelectItem value=\"active\">Active</SelectItem>\n              <SelectItem value=\"invited\">Invited</SelectItem>\n              <SelectItem value=\"inactive\">Inactive</SelectItem>\n            </SelectContent>\n          </Select>\n          \n          <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create Player\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[425px]\">\n              <DialogHeader>\n                <DialogTitle>Create New Player</DialogTitle>\n                <DialogDescription>\n                  Create a player profile. You can invite them to register later.\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"grid gap-4 py-4\">\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"nickname\">Nickname *</Label>\n                  <Input\n                    id=\"nickname\"\n                    placeholder=\"Player's nickname\"\n                    value={newPlayerData.nickname}\n                    onChange={(e) => setNewPlayerData({...newPlayerData, nickname: e.target.value})}\n                  />\n                </div>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"player@example.com\"\n                    value={newPlayerData.email}\n                    onChange={(e) => setNewPlayerData({...newPlayerData, email: e.target.value})}\n                  />\n                </div>\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"skillLevel\">Skill Level</Label>\n                    <Select\n                      value={newPlayerData.skillLevel}\n                      onValueChange={(value) => setNewPlayerData({...newPlayerData, skillLevel: value})}\n                    >\n                      <SelectTrigger id=\"skillLevel\">\n                        <SelectValue placeholder=\"Skill\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((level) => (\n                          <SelectItem key={level} value={level.toString()}>\n                            {level}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"handedness\">Handedness</Label>\n                    <Select\n                      value={newPlayerData.handedness}\n                      onValueChange={(value) => setNewPlayerData({...newPlayerData, handedness: value})}\n                    >\n                      <SelectTrigger id=\"handedness\">\n                        <SelectValue placeholder=\"Hand\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"right\">Right</SelectItem>\n                        <SelectItem value=\"left\">Left</SelectItem>\n                        <SelectItem value=\"ambidextrous\">Ambi</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"position\">Position</Label>\n                    <Select\n                      value={newPlayerData.preferredPosition}\n                      onValueChange={(value) => setNewPlayerData({...newPlayerData, preferredPosition: value})}\n                    >\n                      <SelectTrigger id=\"position\">\n                        <SelectValue placeholder=\"Position\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"forehand\">Forehand</SelectItem>\n                        <SelectItem value=\"backhand\">Backhand</SelectItem>\n                        <SelectItem value=\"both\">Both</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </div>\n              <DialogFooter>\n                <Button variant=\"outline\" onClick={() => setCreateDialogOpen(false)}>Cancel</Button>\n                <Button onClick={handleCreatePlayer} disabled={isCreating}>\n                  {isCreating ? \"Creating...\" : \"Create Player\"}\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n      \n      <Card>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Nickname</TableHead>\n                  <TableHead>Email</TableHead>\n                  <TableHead>Skill Level</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {isLoading ? (\n                  <TableRow>\n                    <TableCell colSpan={5} className=\"text-center\">\n                      <div className=\"py-8 text-muted-foreground animate-pulse\">\n                        Loading players...\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ) : players.length > 0 ? (\n                  players.map((player) => (\n                    <TableRow key={player.id}>\n                      <TableCell className=\"font-medium\">{player.nickname}</TableCell>\n                      <TableCell>{player.email || \"N/A\"}</TableCell>\n                      <TableCell>{player.skillLevel}</TableCell>\n                      <TableCell>{getStatusBadge(player)}</TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          {player.email && !player.userId && !player.invitationSent && (\n                            <Button variant=\"outline\" size=\"sm\" onClick={() => sendInvitation(player.id)}>\n                              <Mail className=\"h-4 w-4 mr-1\" />\n                              Invite\n                            </Button>\n                          )}\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            asChild\n                          >\n                            <a href={`/dashboard/admin/players/${player.id}`}>\n                              <UserCircle2 className=\"h-4 w-4 mr-1\" />\n                              View\n                            </a>\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={5} className=\"text-center\">\n                      <div className=\"py-8\">\n                        <User className=\"h-8 w-8 mx-auto text-muted-foreground mb-2\" />\n                        <p className=\"text-muted-foreground\">No players found</p>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default PlayerManagement;
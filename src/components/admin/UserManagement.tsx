"use client";\n\nimport { useState, useEffect } from \"react\";\nimport { useSession } from \"next-auth/react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { toast } from \"sonner\";\nimport { Search, CheckCircle2, XCircle, UserCircle, Users } from \"lucide-react\";\nimport { ROLES } from \"@/lib/auth/role-utils\";\n\ninterface User {\n  id: string;\n  _id: string;\n  name: string;\n  email: string;\n  roles: Array<{\n    id: string;\n    name: string;\n  }>;\n  emailVerified: boolean;\n  lastLogin?: string;\n  createdAt: string;\n}\n\ninterface UserManagementProps {\n  onUpdate?: () => void;\n}\n\nfunction UserManagement({ onUpdate }: UserManagementProps) {\n  const { data: session } = useSession();\n  const [users, setUsers] = useState<User[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [roleFilter, setRoleFilter] = useState<string>(\"all\");\n  const [userToEdit, setUserToEdit] = useState<User | null>(null);\n  const [saving, setSaving] = useState(false);\n\n  const fetchUsers = async () => {\n    try {\n      setIsLoading(true);\n      let url = '/api/admin/users';\n      \n      // Add search params if provided\n      const params = new URLSearchParams();\n      if (searchTerm) {\n        if (searchTerm.includes('@')) {\n          params.append('email', searchTerm);\n        } else {\n          params.append('name', searchTerm);\n        }\n      }\n      \n      if (roleFilter && roleFilter !== \"all\") {\n        params.append('roleId', roleFilter);\n      }\n      \n      if (params.toString()) {\n        url += `?${params.toString()}`;\n      }\n      \n      const response = await fetch(url);\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to fetch users\");\n      }\n      \n      const data = await response.json();\n      \n      if (data.users) {\n        // Process the users to ensure IDs are normalized\n        const processedUsers = data.users.map((user: any) => ({\n          ...user,\n          id: user._id || user.id\n        }));\n        setUsers(processedUsers);\n      }\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      toast.error(\"Failed to load users\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchUsers();\n  }, [roleFilter]);\n\n  const handleSearch = () => {\n    fetchUsers();\n  };\n\n  const hasRole = (user: User, roleId: string) => {\n    return user.roles.some(role => role.id === roleId);\n  };\n\n  const getRoleBadges = (user: User) => {\n    return user.roles.map(role => (\n      <Badge \n        key={role.id} \n        variant={role.id === ROLES.ADMIN ? \"default\" : \"outline\"}\n        className=\"mr-1\"\n      >\n        {role.name}\n      </Badge>\n    ));\n  };\n\n  const updateUserRoles = async (userId: string, roles: Array<{id: string, name: string}>) => {\n    try {\n      setSaving(true);\n      \n      const response = await fetch('/api/admin/users', {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          userId,\n          roles\n        }),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to update user roles');\n      }\n      \n      // Update local state to reflect the changes\n      setUsers(users.map(user => {\n        if (user.id === userId) {\n          return { ...user, roles };\n        }\n        return user;\n      }));\n      \n      setUserToEdit(null);\n      toast.success('User roles updated successfully');\n      \n      if (onUpdate) {\n        onUpdate();\n      }\n    } catch (error) {\n      console.error('Error updating user roles:', error);\n      toast.error(error instanceof Error ? error.message : 'Failed to update user roles');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const toggleRole = (user: User, roleId: string, roleName: string) => {\n    const hasTheRole = hasRole(user, roleId);\n    let newRoles;\n    \n    if (hasTheRole) {\n      // Prevent removing the last role\n      if (user.roles.length === 1) {\n        toast.error(\"User must have at least one role\");\n        return;\n      }\n      \n      // Remove the role\n      newRoles = user.roles.filter(role => role.id !== roleId);\n    } else {\n      // Add the role\n      newRoles = [...user.roles, { id: roleId, name: roleName }];\n    }\n    \n    updateUserRoles(user.id, newRoles);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex flex-col sm:flex-row gap-4\">\n        <div className=\"flex-1 flex items-center space-x-2\">\n          <Input\n            placeholder=\"Search by name or email\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"flex-1\"\n          />\n          <Button onClick={handleSearch} type=\"button\">\n            <Search className=\"h-4 w-4 mr-2\" />\n            Search\n          </Button>\n        </div>\n        \n        <Select value={roleFilter} onValueChange={setRoleFilter}>\n          <SelectTrigger className=\"w-[180px]\">\n            <SelectValue placeholder=\"Filter by role\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All roles</SelectItem>\n            <SelectItem value={ROLES.ADMIN}>Admin</SelectItem>\n            <SelectItem value={ROLES.PLAYER}>Player</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n      \n      <Card>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Email</TableHead>\n                  <TableHead>Roles</TableHead>\n                  <TableHead>Verified</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {isLoading ? (\n                  <TableRow>\n                    <TableCell colSpan={5} className=\"text-center\">\n                      <div className=\"py-8 text-muted-foreground animate-pulse\">\n                        Loading users...\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ) : users.length > 0 ? (\n                  users.map((user) => (\n                    <TableRow key={user.id}>\n                      <TableCell className=\"font-medium\">{user.name}</TableCell>\n                      <TableCell>{user.email}</TableCell>\n                      <TableCell>\n                        {getRoleBadges(user)}\n                      </TableCell>\n                      <TableCell>\n                        {user.emailVerified ? (\n                          <CheckCircle2 className=\"h-5 w-5 text-green-500\" />\n                        ) : (\n                          <XCircle className=\"h-5 w-5 text-red-500\" />\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            disabled={saving}\n                            onClick={() => toggleRole(user, ROLES.ADMIN, 'admin')}\n                          >\n                            {hasRole(user, ROLES.ADMIN) ? \"Remove Admin\" : \"Make Admin\"}\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={5} className=\"text-center\">\n                      <div className=\"py-8\">\n                        <Users className=\"h-8 w-8 mx-auto text-muted-foreground mb-2\" />\n                        <p className=\"text-muted-foreground\">No users found</p>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default UserManagement;